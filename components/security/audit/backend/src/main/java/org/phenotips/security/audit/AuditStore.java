/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
 */
package org.phenotips.security.audit;

import org.xwiki.component.annotation.Role;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.stability.Unstable;
import org.xwiki.users.User;

import java.util.List;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * Stores and retrieves {@link AuditEvent audit events}.
 *
 * @version $Id$
 * @since 1.4
 */
@Unstable("New API introduced in 1.4")
@Role
public interface AuditStore
{
    /**
     * Stores an audit event.
     *
     * @param event the event to store
     */
    void store(@Nonnull AuditEvent event);

    /**
     * Retrieves all the events affecting a specific entity.
     *
     * @param entity a reference to the target entity
     * @return a list of audited events, may be empty
     */
    @Nonnull
    List<AuditEvent> getEventsForEntity(@Nonnull DocumentReference entity);

    /**
     * Retrieves all the events of a specific type affecting a specific entity.
     *
     * @param entity a reference to the target entity
     * @param type the event type, for example {@code view}, {@code edit}, {@code export}
     * @return a list of audited events, may be empty
     */
    @Nonnull
    List<AuditEvent> getEventsForEntity(@Nonnull DocumentReference entity, @Nullable String type);

    /**
     * Retrieves all the events generated by a specific user.
     *
     * @param user the user whose events to retrieve, may be {@code null}
     * @return a list of audited events, may be empty
     */
    @Nonnull
    List<AuditEvent> getEventsForUser(@Nullable User user);

    /**
     * Retrieves all the events generated by a specific user, coming from a specific IP.
     *
     * @param user the user whose events to retrieve, may be {@code null}
     * @param ip the ip where the request came from
     * @return a list of audited events, may be empty
     */
    @Nonnull
    List<AuditEvent> getEventsForUser(@Nullable User user, @Nullable String ip);

    /**
     * Retrieves all the events of a specific type generated by a specific user, coming from a specific IP.
     *
     * @param user the user whose events to retrieve, may be {@code null}
     * @param ip the ip where the request came from
     * @param type the event type, for example {@code view}, {@code edit}, {@code export}
     * @return a list of audited events, may be empty
     */
    @Nonnull
    List<AuditEvent> getEventsForUser(@Nullable User user, @Nullable String ip, @Nullable String type);
}
